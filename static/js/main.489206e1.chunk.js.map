{"version":3,"sources":["components/Button.js","components/Editor.js","components/Preview.js","components/Header.js","defaultMarkdown.js","components/App.js","serviceWorker.js","index.js"],"names":["Button","props","name","handleClick","className","react_default","a","createElement","type","onClick","Editor","markdown","handleChange","components_Button","onChange","value","Preview","_ref","dangerouslySetInnerHTML","__html","marked","Header","href","target","rel","defaultMarkdown","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","event","setState","preventDefault","components_Header","components_Editor","components_Preview","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAiBeA,EAdA,SAAAC,GAAS,IACdC,EAAiCD,EAAjCC,KAAMC,EAA2BF,EAA3BE,YAAaC,EAAcH,EAAdG,UAC3B,OACEC,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAASN,EAAaC,UAAWA,GACpDF,ICeQQ,EAlBA,SAAAT,GAAS,IACdU,EAAwCV,EAAxCU,SAAUC,EAA8BX,EAA9BW,aAAcT,EAAgBF,EAAhBE,YAEhC,OACEE,EAAAC,EAAAC,cAAA,OAAKH,UAAU,oBACbC,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACM,EAAD,CAAQX,KAAK,QAAQC,YAAaA,EAAaC,UAAU,YACzDC,EAAAC,EAAAC,cAAA,YAAUH,UAAU,SAASU,SAAUF,EAAcG,MAAOJ,sBCOnDK,EAbC,SAAAC,GAAkB,IAAfN,EAAeM,EAAfN,SACjB,OACEN,EAAAC,EAAAC,cAAA,OAAKH,UAAU,qBACbC,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKH,UAAU,UAAUc,wBAAyB,CAAEC,OAAQC,IAAOT,QCU1DU,EAjBA,kBACbhB,EAAAC,EAAAC,cAAA,UAAQH,UAAU,UAChBC,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGe,KAAK,yDAAyDC,OAAO,SAASC,IAAI,uBAArF,mBAIFnB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGe,KAAK,yDAAyDC,OAAO,SAASC,IAAI,uBAArF,mBCuCOC,EAnDM,i1BC6CNC,qBArCb,SAAAA,EAAYzB,GAAO,IAAA0B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM7B,KAEDiC,MAAQ,CACXvB,SAAUc,GAEZE,EAAKf,aAAee,EAAKf,aAAauB,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IACpBA,EAAKxB,YAAcwB,EAAKxB,YAAYgC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IAPFA,4EAUNU,GACXP,KAAKQ,SAAS,CACZ3B,SAAU0B,EAAMd,OAAOR,4CAIfsB,GACVA,EAAME,iBACNT,KAAKQ,SAAS,CACZ3B,SAAU,sCAIL,IACCA,EAAamB,KAAKI,MAAlBvB,SACR,OACEN,EAAAC,EAAAC,cAAA,OAAKH,UAAU,OACbC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAAA,OAAKH,UAAU,aACbC,EAAAC,EAAAC,cAACkC,EAAD,CAAQ9B,SAAUA,EAAUC,aAAckB,KAAKlB,aAAcT,YAAa2B,KAAK3B,cAC/EE,EAAAC,EAAAC,cAACmC,EAAD,CAAS/B,SAAUA,aA/BXgC,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.489206e1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = props => {\n  const { name, handleClick, className } = props;\n  return (\n    <button type=\"button\" onClick={handleClick} className={className}>\n      {name}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  name: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\nconst Editor = props => {\n  const { markdown, handleChange, handleClick } = props;\n\n  return (\n    <div className=\"editor-container\">\n      <h2>Editor</h2>\n      <Button name=\"Clear\" handleClick={handleClick} className=\"clr-btn\" />\n      <textarea className=\"editor\" onChange={handleChange} value={markdown} />\n    </div>\n  );\n};\n\nEditor.propTypes = {\n  markdown: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default Editor;\n","/* eslint-disable react/no-danger */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport marked from 'marked';\n\nconst Preview = ({ markdown }) => {\n  return (\n    <div className=\"preview-container\">\n      <h2>Preview</h2>\n      <div className=\"preview\" dangerouslySetInnerHTML={{ __html: marked(markdown) }} />\n    </div>\n  );\n};\n\nPreview.propTypes = {\n  markdown: PropTypes.string.isRequired,\n};\n\nexport default Preview;\n","import React from 'react';\n\nconst Header = () => (\n  <header className=\"header\">\n    <h1>Markdown Previewer</h1>\n    <ul>\n      <li>\n        <a href=\"https://guides.github.com/features/mastering-markdown/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Markdown Guide\n        </a>\n      </li>\n      <li>\n        <a href=\"https://github.com/srikanthkanjarla/markdown-previewer\" target=\"_blank\" rel=\"noopener noreferrer\">\n          GitHub Repo\n        </a>\n      </li>\n    </ul>\n  </header>\n);\nexport default Header;\n","const defaultMarkdown = `\n# Heading level 1 \\n\n## Heading level 2 \\n\n###### Heading level 6 \\n\n\n*This text will be italic*\\n \n_This will also be italic_\\n \n**This text will be bold**\\n \n__This will also be bold__\\n \n_You **can** combine them_\n\n## Inline code\n\nI think you should use \\` <addr>\\` element here instead.\n\n## Block Code\n\n\\`\\`\\`javascript\nfunction fancyAlert(arg) {\n  if(arg) {\n    $.facebox({div:'#foo'})\n  }\n}\n\\`\\`\\`\n\n## BlockQuotes\n\nAs Kanye West said:\n> We are living the future so\n> the present is our past.\n\n## Links\n\n[Mastering Markdown](https://guides.github.com/features/mastering-markdown/)\n\n## Unordered List\n* Item 1\n* Item 2\n  * Item 2a\n  * Item 2b\n\n## Ordered List\n1. Item 1\n1. Item 2\n1. Item 3\n  1. Item 3a\n  1. Item 3b\n\n## Images\n![GitHub logo](https://avatars3.githubusercontent.com/u/9919?v=3&s=280)\n`;\nexport default defaultMarkdown;\n","import React from 'react';\nimport Editor from './Editor';\nimport Preview from './Preview';\nimport Header from './Header';\nimport defaultMarkdown from '../defaultMarkdown';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      markdown: defaultMarkdown,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      markdown: event.target.value,\n    });\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    this.setState({\n      markdown: '',\n    });\n  }\n\n  render() {\n    const { markdown } = this.state;\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"container\">\n          <Editor markdown={markdown} handleChange={this.handleChange} handleClick={this.handleClick} />\n          <Preview markdown={markdown} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}